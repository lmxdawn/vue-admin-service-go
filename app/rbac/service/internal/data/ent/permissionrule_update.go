// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"vue-admin/app/rbac/service/internal/data/ent/permissionrule"
	"vue-admin/app/rbac/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionRuleUpdate is the builder for updating PermissionRule entities.
type PermissionRuleUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionRuleMutation
}

// Where appends a list predicates to the PermissionRuleUpdate builder.
func (pru *PermissionRuleUpdate) Where(ps ...predicate.PermissionRule) *PermissionRuleUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetPid sets the "pid" field.
func (pru *PermissionRuleUpdate) SetPid(i int) *PermissionRuleUpdate {
	pru.mutation.ResetPid()
	pru.mutation.SetPid(i)
	return pru
}

// AddPid adds i to the "pid" field.
func (pru *PermissionRuleUpdate) AddPid(i int) *PermissionRuleUpdate {
	pru.mutation.AddPid(i)
	return pru
}

// SetName sets the "name" field.
func (pru *PermissionRuleUpdate) SetName(s string) *PermissionRuleUpdate {
	pru.mutation.SetName(s)
	return pru
}

// SetTitle sets the "title" field.
func (pru *PermissionRuleUpdate) SetTitle(s string) *PermissionRuleUpdate {
	pru.mutation.SetTitle(s)
	return pru
}

// SetStatus sets the "status" field.
func (pru *PermissionRuleUpdate) SetStatus(i int) *PermissionRuleUpdate {
	pru.mutation.ResetStatus()
	pru.mutation.SetStatus(i)
	return pru
}

// AddStatus adds i to the "status" field.
func (pru *PermissionRuleUpdate) AddStatus(i int) *PermissionRuleUpdate {
	pru.mutation.AddStatus(i)
	return pru
}

// SetCondition sets the "condition" field.
func (pru *PermissionRuleUpdate) SetCondition(s string) *PermissionRuleUpdate {
	pru.mutation.SetCondition(s)
	return pru
}

// SetSort sets the "sort" field.
func (pru *PermissionRuleUpdate) SetSort(i int) *PermissionRuleUpdate {
	pru.mutation.ResetSort()
	pru.mutation.SetSort(i)
	return pru
}

// AddSort adds i to the "sort" field.
func (pru *PermissionRuleUpdate) AddSort(i int) *PermissionRuleUpdate {
	pru.mutation.AddSort(i)
	return pru
}

// SetCreateTime sets the "create_time" field.
func (pru *PermissionRuleUpdate) SetCreateTime(t time.Time) *PermissionRuleUpdate {
	pru.mutation.SetCreateTime(t)
	return pru
}

// SetUpdateTime sets the "update_time" field.
func (pru *PermissionRuleUpdate) SetUpdateTime(t time.Time) *PermissionRuleUpdate {
	pru.mutation.SetUpdateTime(t)
	return pru
}

// Mutation returns the PermissionRuleMutation object of the builder.
func (pru *PermissionRuleUpdate) Mutation() *PermissionRuleMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PermissionRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pru.hooks) == 0 {
		affected, err = pru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pru.mutation = mutation
			affected, err = pru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pru.hooks) - 1; i >= 0; i-- {
			if pru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PermissionRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PermissionRuleUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PermissionRuleUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PermissionRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permissionrule.Table,
			Columns: permissionrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionrule.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldPid,
		})
	}
	if value, ok := pru.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldPid,
		})
	}
	if value, ok := pru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldName,
		})
	}
	if value, ok := pru.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldTitle,
		})
	}
	if value, ok := pru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldStatus,
		})
	}
	if value, ok := pru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldStatus,
		})
	}
	if value, ok := pru.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldCondition,
		})
	}
	if value, ok := pru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldSort,
		})
	}
	if value, ok := pru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldSort,
		})
	}
	if value, ok := pru.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldCreateTime,
		})
	}
	if value, ok := pru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PermissionRuleUpdateOne is the builder for updating a single PermissionRule entity.
type PermissionRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionRuleMutation
}

// SetPid sets the "pid" field.
func (pruo *PermissionRuleUpdateOne) SetPid(i int) *PermissionRuleUpdateOne {
	pruo.mutation.ResetPid()
	pruo.mutation.SetPid(i)
	return pruo
}

// AddPid adds i to the "pid" field.
func (pruo *PermissionRuleUpdateOne) AddPid(i int) *PermissionRuleUpdateOne {
	pruo.mutation.AddPid(i)
	return pruo
}

// SetName sets the "name" field.
func (pruo *PermissionRuleUpdateOne) SetName(s string) *PermissionRuleUpdateOne {
	pruo.mutation.SetName(s)
	return pruo
}

// SetTitle sets the "title" field.
func (pruo *PermissionRuleUpdateOne) SetTitle(s string) *PermissionRuleUpdateOne {
	pruo.mutation.SetTitle(s)
	return pruo
}

// SetStatus sets the "status" field.
func (pruo *PermissionRuleUpdateOne) SetStatus(i int) *PermissionRuleUpdateOne {
	pruo.mutation.ResetStatus()
	pruo.mutation.SetStatus(i)
	return pruo
}

// AddStatus adds i to the "status" field.
func (pruo *PermissionRuleUpdateOne) AddStatus(i int) *PermissionRuleUpdateOne {
	pruo.mutation.AddStatus(i)
	return pruo
}

// SetCondition sets the "condition" field.
func (pruo *PermissionRuleUpdateOne) SetCondition(s string) *PermissionRuleUpdateOne {
	pruo.mutation.SetCondition(s)
	return pruo
}

// SetSort sets the "sort" field.
func (pruo *PermissionRuleUpdateOne) SetSort(i int) *PermissionRuleUpdateOne {
	pruo.mutation.ResetSort()
	pruo.mutation.SetSort(i)
	return pruo
}

// AddSort adds i to the "sort" field.
func (pruo *PermissionRuleUpdateOne) AddSort(i int) *PermissionRuleUpdateOne {
	pruo.mutation.AddSort(i)
	return pruo
}

// SetCreateTime sets the "create_time" field.
func (pruo *PermissionRuleUpdateOne) SetCreateTime(t time.Time) *PermissionRuleUpdateOne {
	pruo.mutation.SetCreateTime(t)
	return pruo
}

// SetUpdateTime sets the "update_time" field.
func (pruo *PermissionRuleUpdateOne) SetUpdateTime(t time.Time) *PermissionRuleUpdateOne {
	pruo.mutation.SetUpdateTime(t)
	return pruo
}

// Mutation returns the PermissionRuleMutation object of the builder.
func (pruo *PermissionRuleUpdateOne) Mutation() *PermissionRuleMutation {
	return pruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PermissionRuleUpdateOne) Select(field string, fields ...string) *PermissionRuleUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PermissionRule entity.
func (pruo *PermissionRuleUpdateOne) Save(ctx context.Context) (*PermissionRule, error) {
	var (
		err  error
		node *PermissionRule
	)
	if len(pruo.hooks) == 0 {
		node, err = pruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pruo.mutation = mutation
			node, err = pruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pruo.hooks) - 1; i >= 0; i-- {
			if pruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PermissionRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PermissionRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PermissionRuleUpdateOne) SaveX(ctx context.Context) *PermissionRule {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PermissionRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PermissionRuleUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PermissionRuleUpdateOne) sqlSave(ctx context.Context) (_node *PermissionRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permissionrule.Table,
			Columns: permissionrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionrule.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermissionRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionrule.FieldID)
		for _, f := range fields {
			if !permissionrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissionrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldPid,
		})
	}
	if value, ok := pruo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldPid,
		})
	}
	if value, ok := pruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldName,
		})
	}
	if value, ok := pruo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldTitle,
		})
	}
	if value, ok := pruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldStatus,
		})
	}
	if value, ok := pruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldStatus,
		})
	}
	if value, ok := pruo.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldCondition,
		})
	}
	if value, ok := pruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldSort,
		})
	}
	if value, ok := pruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldSort,
		})
	}
	if value, ok := pruo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldCreateTime,
		})
	}
	if value, ok := pruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldUpdateTime,
		})
	}
	_node = &PermissionRule{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
