// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"vue-admin/app/rbac/service/internal/data/ent/permissionrule"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionRuleCreate is the builder for creating a PermissionRule entity.
type PermissionRuleCreate struct {
	config
	mutation *PermissionRuleMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (prc *PermissionRuleCreate) SetPid(i int) *PermissionRuleCreate {
	prc.mutation.SetPid(i)
	return prc
}

// SetName sets the "name" field.
func (prc *PermissionRuleCreate) SetName(s string) *PermissionRuleCreate {
	prc.mutation.SetName(s)
	return prc
}

// SetTitle sets the "title" field.
func (prc *PermissionRuleCreate) SetTitle(s string) *PermissionRuleCreate {
	prc.mutation.SetTitle(s)
	return prc
}

// SetStatus sets the "status" field.
func (prc *PermissionRuleCreate) SetStatus(i int) *PermissionRuleCreate {
	prc.mutation.SetStatus(i)
	return prc
}

// SetCondition sets the "condition" field.
func (prc *PermissionRuleCreate) SetCondition(s string) *PermissionRuleCreate {
	prc.mutation.SetCondition(s)
	return prc
}

// SetSort sets the "sort" field.
func (prc *PermissionRuleCreate) SetSort(i int) *PermissionRuleCreate {
	prc.mutation.SetSort(i)
	return prc
}

// SetCreateTime sets the "create_time" field.
func (prc *PermissionRuleCreate) SetCreateTime(t time.Time) *PermissionRuleCreate {
	prc.mutation.SetCreateTime(t)
	return prc
}

// SetUpdateTime sets the "update_time" field.
func (prc *PermissionRuleCreate) SetUpdateTime(t time.Time) *PermissionRuleCreate {
	prc.mutation.SetUpdateTime(t)
	return prc
}

// SetID sets the "id" field.
func (prc *PermissionRuleCreate) SetID(i int) *PermissionRuleCreate {
	prc.mutation.SetID(i)
	return prc
}

// Mutation returns the PermissionRuleMutation object of the builder.
func (prc *PermissionRuleCreate) Mutation() *PermissionRuleMutation {
	return prc.mutation
}

// Save creates the PermissionRule in the database.
func (prc *PermissionRuleCreate) Save(ctx context.Context) (*PermissionRule, error) {
	var (
		err  error
		node *PermissionRule
	)
	if len(prc.hooks) == 0 {
		if err = prc.check(); err != nil {
			return nil, err
		}
		node, err = prc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prc.check(); err != nil {
				return nil, err
			}
			prc.mutation = mutation
			if node, err = prc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prc.hooks) - 1; i >= 0; i-- {
			if prc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PermissionRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PermissionRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PermissionRuleCreate) SaveX(ctx context.Context) *PermissionRule {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PermissionRuleCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PermissionRuleCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PermissionRuleCreate) check() error {
	if _, ok := prc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`ent: missing required field "PermissionRule.pid"`)}
	}
	if _, ok := prc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PermissionRule.name"`)}
	}
	if _, ok := prc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PermissionRule.title"`)}
	}
	if _, ok := prc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PermissionRule.status"`)}
	}
	if _, ok := prc.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`ent: missing required field "PermissionRule.condition"`)}
	}
	if _, ok := prc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "PermissionRule.sort"`)}
	}
	if _, ok := prc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "PermissionRule.create_time"`)}
	}
	if _, ok := prc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "PermissionRule.update_time"`)}
	}
	return nil
}

func (prc *PermissionRuleCreate) sqlSave(ctx context.Context) (*PermissionRule, error) {
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (prc *PermissionRuleCreate) createSpec() (*PermissionRule, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionRule{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: permissionrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionrule.FieldID,
			},
		}
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.Pid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldPid,
		})
		_node.Pid = value
	}
	if value, ok := prc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldName,
		})
		_node.Name = value
	}
	if value, ok := prc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := prc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := prc.mutation.Condition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionrule.FieldCondition,
		})
		_node.Condition = value
	}
	if value, ok := prc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: permissionrule.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := prc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := prc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: permissionrule.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// PermissionRuleCreateBulk is the builder for creating many PermissionRule entities in bulk.
type PermissionRuleCreateBulk struct {
	config
	builders []*PermissionRuleCreate
}

// Save creates the PermissionRule entities in the database.
func (prcb *PermissionRuleCreateBulk) Save(ctx context.Context) ([]*PermissionRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PermissionRule, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PermissionRuleCreateBulk) SaveX(ctx context.Context) []*PermissionRule {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PermissionRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PermissionRuleCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
