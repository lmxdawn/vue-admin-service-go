// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: v1/rbac_admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacAdminClient is the client API for RbacAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacAdminClient interface {
	CreateRbacAdmin(ctx context.Context, in *CreateRbacAdminRequest, opts ...grpc.CallOption) (*CreateRbacAdminReply, error)
}

type rbacAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacAdminClient(cc grpc.ClientConnInterface) RbacAdminClient {
	return &rbacAdminClient{cc}
}

func (c *rbacAdminClient) CreateRbacAdmin(ctx context.Context, in *CreateRbacAdminRequest, opts ...grpc.CallOption) (*CreateRbacAdminReply, error) {
	out := new(CreateRbacAdminReply)
	err := c.cc.Invoke(ctx, "/api.ui.admin.v1.RbacAdmin/CreateRbacAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacAdminServer is the server API for RbacAdmin service.
// All implementations must embed UnimplementedRbacAdminServer
// for forward compatibility
type RbacAdminServer interface {
	CreateRbacAdmin(context.Context, *CreateRbacAdminRequest) (*CreateRbacAdminReply, error)
	mustEmbedUnimplementedRbacAdminServer()
}

// UnimplementedRbacAdminServer must be embedded to have forward compatible implementations.
type UnimplementedRbacAdminServer struct {
}

func (UnimplementedRbacAdminServer) CreateRbacAdmin(context.Context, *CreateRbacAdminRequest) (*CreateRbacAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRbacAdmin not implemented")
}
func (UnimplementedRbacAdminServer) mustEmbedUnimplementedRbacAdminServer() {}

// UnsafeRbacAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacAdminServer will
// result in compilation errors.
type UnsafeRbacAdminServer interface {
	mustEmbedUnimplementedRbacAdminServer()
}

func RegisterRbacAdminServer(s grpc.ServiceRegistrar, srv RbacAdminServer) {
	s.RegisterService(&RbacAdmin_ServiceDesc, srv)
}

func _RbacAdmin_CreateRbacAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRbacAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacAdminServer).CreateRbacAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ui.admin.v1.RbacAdmin/CreateRbacAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacAdminServer).CreateRbacAdmin(ctx, req.(*CreateRbacAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacAdmin_ServiceDesc is the grpc.ServiceDesc for RbacAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ui.admin.v1.RbacAdmin",
	HandlerType: (*RbacAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRbacAdmin",
			Handler:    _RbacAdmin_CreateRbacAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rbac_admin.proto",
}
