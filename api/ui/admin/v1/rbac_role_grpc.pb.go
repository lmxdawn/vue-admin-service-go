// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: v1/rbac_role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacRoleClient is the client API for RbacRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacRoleClient interface {
	CreateRbacRole(ctx context.Context, in *CreateRbacRoleRequest, opts ...grpc.CallOption) (*CreateRbacRoleReply, error)
}

type rbacRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacRoleClient(cc grpc.ClientConnInterface) RbacRoleClient {
	return &rbacRoleClient{cc}
}

func (c *rbacRoleClient) CreateRbacRole(ctx context.Context, in *CreateRbacRoleRequest, opts ...grpc.CallOption) (*CreateRbacRoleReply, error) {
	out := new(CreateRbacRoleReply)
	err := c.cc.Invoke(ctx, "/api.ui.admin.v1.RbacRole/CreateRbacRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacRoleServer is the server API for RbacRole service.
// All implementations must embed UnimplementedRbacRoleServer
// for forward compatibility
type RbacRoleServer interface {
	CreateRbacRole(context.Context, *CreateRbacRoleRequest) (*CreateRbacRoleReply, error)
	mustEmbedUnimplementedRbacRoleServer()
}

// UnimplementedRbacRoleServer must be embedded to have forward compatible implementations.
type UnimplementedRbacRoleServer struct {
}

func (UnimplementedRbacRoleServer) CreateRbacRole(context.Context, *CreateRbacRoleRequest) (*CreateRbacRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRbacRole not implemented")
}
func (UnimplementedRbacRoleServer) mustEmbedUnimplementedRbacRoleServer() {}

// UnsafeRbacRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacRoleServer will
// result in compilation errors.
type UnsafeRbacRoleServer interface {
	mustEmbedUnimplementedRbacRoleServer()
}

func RegisterRbacRoleServer(s grpc.ServiceRegistrar, srv RbacRoleServer) {
	s.RegisterService(&RbacRole_ServiceDesc, srv)
}

func _RbacRole_CreateRbacRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRbacRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRoleServer).CreateRbacRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ui.admin.v1.RbacRole/CreateRbacRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRoleServer).CreateRbacRole(ctx, req.(*CreateRbacRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacRole_ServiceDesc is the grpc.ServiceDesc for RbacRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ui.admin.v1.RbacRole",
	HandlerType: (*RbacRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRbacRole",
			Handler:    _RbacRole_CreateRbacRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rbac_role.proto",
}
