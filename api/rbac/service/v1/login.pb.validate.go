// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/login.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPwd()); l < 1 || l > 255 {
		err := LoginRequestValidationError{
			field:  "Pwd",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoRequestMultiError, or nil if none found.
func (m *UserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserInfoRequestMultiError(errors)
	}

	return nil
}

// UserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by UserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type UserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoRequestMultiError) AllErrors() []error { return m }

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoReplyMultiError, or
// nil if none found.
func (m *UserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UserInfoReplyMultiError(errors)
	}

	return nil
}

// UserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by UserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type UserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoReplyMultiError) AllErrors() []error { return m }

// UserInfoReplyValidationError is the validation error returned by
// UserInfoReply.Validate if the designated constraints aren't met.
type UserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReplyValidationError) ErrorName() string { return "UserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReplyValidationError{}

// Validate checks the field values on PasswordRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRequestMultiError, or nil if none found.
func (m *PasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAdminId() <= 0 {
		err := PasswordRequestValidationError{
			field:  "AdminId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 1 || l > 255 {
		err := PasswordRequestValidationError{
			field:  "OldPassword",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 1 || l > 255 {
		err := PasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordRequestMultiError(errors)
	}

	return nil
}

// PasswordRequestMultiError is an error wrapping multiple validation errors
// returned by PasswordRequest.ValidateAll() if the designated constraints
// aren't met.
type PasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRequestMultiError) AllErrors() []error { return m }

// PasswordRequestValidationError is the validation error returned by
// PasswordRequest.Validate if the designated constraints aren't met.
type PasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRequestValidationError) ErrorName() string { return "PasswordRequestValidationError" }

// Error satisfies the builtin error interface
func (e PasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRequestValidationError{}

// Validate checks the field values on PasswordReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PasswordReplyMultiError, or
// nil if none found.
func (m *PasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PasswordReplyMultiError(errors)
	}

	return nil
}

// PasswordReplyMultiError is an error wrapping multiple validation errors
// returned by PasswordReply.ValidateAll() if the designated constraints
// aren't met.
type PasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordReplyMultiError) AllErrors() []error { return m }

// PasswordReplyValidationError is the validation error returned by
// PasswordReply.Validate if the designated constraints aren't met.
type PasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordReplyValidationError) ErrorName() string { return "PasswordReplyValidationError" }

// Error satisfies the builtin error interface
func (e PasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordReplyValidationError{}
