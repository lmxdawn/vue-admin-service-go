// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminRequestMultiError, or nil if none found.
func (m *CreateAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := CreateAdminRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 255 {
		err := CreateAdminRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateAdminRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := CreateAdminRequestValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAdminRequestMultiError(errors)
	}

	return nil
}

// CreateAdminRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminRequestMultiError) AllErrors() []error { return m }

// CreateAdminRequestValidationError is the validation error returned by
// CreateAdminRequest.Validate if the designated constraints aren't met.
type CreateAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminRequestValidationError) ErrorName() string {
	return "CreateAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminRequestValidationError{}

var _CreateAdminRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on CreateAdminReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminReplyMultiError, or nil if none found.
func (m *CreateAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAdminReplyMultiError(errors)
	}

	return nil
}

// CreateAdminReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAdminReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminReplyMultiError) AllErrors() []error { return m }

// CreateAdminReplyValidationError is the validation error returned by
// CreateAdminReply.Validate if the designated constraints aren't met.
type CreateAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminReplyValidationError) ErrorName() string { return "CreateAdminReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminReplyValidationError{}

// Validate checks the field values on UpdateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminRequestMultiError, or nil if none found.
func (m *UpdateAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAdminRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := UpdateAdminRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 255 {
		err := UpdateAdminRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateAdminRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := UpdateAdminRequestValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAdminRequestMultiError(errors)
	}

	return nil
}

// UpdateAdminRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminRequestMultiError) AllErrors() []error { return m }

// UpdateAdminRequestValidationError is the validation error returned by
// UpdateAdminRequest.Validate if the designated constraints aren't met.
type UpdateAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminRequestValidationError) ErrorName() string {
	return "UpdateAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminRequestValidationError{}

var _UpdateAdminRequest_Status_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on UpdateAdminReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminReplyMultiError, or nil if none found.
func (m *UpdateAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAdminReplyMultiError(errors)
	}

	return nil
}

// UpdateAdminReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateAdminReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminReplyMultiError) AllErrors() []error { return m }

// UpdateAdminReplyValidationError is the validation error returned by
// UpdateAdminReply.Validate if the designated constraints aren't met.
type UpdateAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminReplyValidationError) ErrorName() string { return "UpdateAdminReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminReplyValidationError{}

// Validate checks the field values on DeleteAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminRequestMultiError, or nil if none found.
func (m *DeleteAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAdminRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAdminRequestMultiError(errors)
	}

	return nil
}

// DeleteAdminRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminRequestMultiError) AllErrors() []error { return m }

// DeleteAdminRequestValidationError is the validation error returned by
// DeleteAdminRequest.Validate if the designated constraints aren't met.
type DeleteAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminRequestValidationError) ErrorName() string {
	return "DeleteAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminRequestValidationError{}

// Validate checks the field values on DeleteAdminReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminReplyMultiError, or nil if none found.
func (m *DeleteAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAdminReplyMultiError(errors)
	}

	return nil
}

// DeleteAdminReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAdminReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminReplyMultiError) AllErrors() []error { return m }

// DeleteAdminReplyValidationError is the validation error returned by
// DeleteAdminReply.Validate if the designated constraints aren't met.
type DeleteAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminReplyValidationError) ErrorName() string { return "DeleteAdminReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminReplyValidationError{}

// Validate checks the field values on GetAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminRequestMultiError, or nil if none found.
func (m *GetAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAdminRequestMultiError(errors)
	}

	return nil
}

// GetAdminRequestMultiError is an error wrapping multiple validation errors
// returned by GetAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminRequestMultiError) AllErrors() []error { return m }

// GetAdminRequestValidationError is the validation error returned by
// GetAdminRequest.Validate if the designated constraints aren't met.
type GetAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminRequestValidationError) ErrorName() string { return "GetAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminRequestValidationError{}

// Validate checks the field values on GetAdminReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAdminReplyMultiError, or
// nil if none found.
func (m *GetAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAdminReplyMultiError(errors)
	}

	return nil
}

// GetAdminReplyMultiError is an error wrapping multiple validation errors
// returned by GetAdminReply.ValidateAll() if the designated constraints
// aren't met.
type GetAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminReplyMultiError) AllErrors() []error { return m }

// GetAdminReplyValidationError is the validation error returned by
// GetAdminReply.Validate if the designated constraints aren't met.
type GetAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminReplyValidationError) ErrorName() string { return "GetAdminReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminReplyValidationError{}

// Validate checks the field values on ListAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminRequestMultiError, or nil if none found.
func (m *ListAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Status

	// no validation rules for RoleId

	if len(errors) > 0 {
		return ListAdminRequestMultiError(errors)
	}

	return nil
}

// ListAdminRequestMultiError is an error wrapping multiple validation errors
// returned by ListAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminRequestMultiError) AllErrors() []error { return m }

// ListAdminRequestValidationError is the validation error returned by
// ListAdminRequest.Validate if the designated constraints aren't met.
type ListAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminRequestValidationError) ErrorName() string { return "ListAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminRequestValidationError{}

// Validate checks the field values on ListAdminReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAdminReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAdminReplyMultiError,
// or nil if none found.
func (m *ListAdminReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAdminReplyMultiError(errors)
	}

	return nil
}

// ListAdminReplyMultiError is an error wrapping multiple validation errors
// returned by ListAdminReply.ValidateAll() if the designated constraints
// aren't met.
type ListAdminReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminReplyMultiError) AllErrors() []error { return m }

// ListAdminReplyValidationError is the validation error returned by
// ListAdminReply.Validate if the designated constraints aren't met.
type ListAdminReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminReplyValidationError) ErrorName() string { return "ListAdminReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAdminReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminReplyValidationError{}

// Validate checks the field values on RoleAdminListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleAdminListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAdminListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleAdminListRequestMultiError, or nil if none found.
func (m *RoleAdminListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAdminListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := RoleAdminListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val >= 300 {
		err := RoleAdminListRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 300)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleAdminListRequestMultiError(errors)
	}

	return nil
}

// RoleAdminListRequestMultiError is an error wrapping multiple validation
// errors returned by RoleAdminListRequest.ValidateAll() if the designated
// constraints aren't met.
type RoleAdminListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAdminListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAdminListRequestMultiError) AllErrors() []error { return m }

// RoleAdminListRequestValidationError is the validation error returned by
// RoleAdminListRequest.Validate if the designated constraints aren't met.
type RoleAdminListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAdminListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAdminListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAdminListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAdminListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAdminListRequestValidationError) ErrorName() string {
	return "RoleAdminListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoleAdminListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAdminListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAdminListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAdminListRequestValidationError{}

// Validate checks the field values on RoleAdminListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleAdminListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAdminListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleAdminListReplyMultiError, or nil if none found.
func (m *RoleAdminListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAdminListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleAdminListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleAdminListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleAdminListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleAdminListReplyMultiError(errors)
	}

	return nil
}

// RoleAdminListReplyMultiError is an error wrapping multiple validation errors
// returned by RoleAdminListReply.ValidateAll() if the designated constraints
// aren't met.
type RoleAdminListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAdminListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAdminListReplyMultiError) AllErrors() []error { return m }

// RoleAdminListReplyValidationError is the validation error returned by
// RoleAdminListReply.Validate if the designated constraints aren't met.
type RoleAdminListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAdminListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAdminListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAdminListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAdminListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAdminListReplyValidationError) ErrorName() string {
	return "RoleAdminListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RoleAdminListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAdminListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAdminListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAdminListReplyValidationError{}

// Validate checks the field values on ListAdminReply_Admin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminReply_Admin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminReply_Admin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminReply_AdminMultiError, or nil if none found.
func (m *ListAdminReply_Admin) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminReply_Admin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Tel

	// no validation rules for Email

	// no validation rules for Avatar

	// no validation rules for Sex

	// no validation rules for LastLoginIp

	if all {
		switch v := interface{}(m.GetLastLoginTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "LastLoginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "LastLoginTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdminReply_AdminValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdminReply_AdminValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdminReply_AdminValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdminReply_AdminValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListAdminReply_AdminMultiError(errors)
	}

	return nil
}

// ListAdminReply_AdminMultiError is an error wrapping multiple validation
// errors returned by ListAdminReply_Admin.ValidateAll() if the designated
// constraints aren't met.
type ListAdminReply_AdminMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminReply_AdminMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminReply_AdminMultiError) AllErrors() []error { return m }

// ListAdminReply_AdminValidationError is the validation error returned by
// ListAdminReply_Admin.Validate if the designated constraints aren't met.
type ListAdminReply_AdminValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminReply_AdminValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminReply_AdminValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminReply_AdminValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminReply_AdminValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminReply_AdminValidationError) ErrorName() string {
	return "ListAdminReply_AdminValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminReply_AdminValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminReply_Admin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminReply_AdminValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminReply_AdminValidationError{}

// Validate checks the field values on RoleAdminListReply_Role with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleAdminListReply_Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAdminListReply_Role with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleAdminListReply_RoleMultiError, or nil if none found.
func (m *RoleAdminListReply_Role) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAdminListReply_Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return RoleAdminListReply_RoleMultiError(errors)
	}

	return nil
}

// RoleAdminListReply_RoleMultiError is an error wrapping multiple validation
// errors returned by RoleAdminListReply_Role.ValidateAll() if the designated
// constraints aren't met.
type RoleAdminListReply_RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAdminListReply_RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAdminListReply_RoleMultiError) AllErrors() []error { return m }

// RoleAdminListReply_RoleValidationError is the validation error returned by
// RoleAdminListReply_Role.Validate if the designated constraints aren't met.
type RoleAdminListReply_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAdminListReply_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAdminListReply_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAdminListReply_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAdminListReply_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAdminListReply_RoleValidationError) ErrorName() string {
	return "RoleAdminListReply_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e RoleAdminListReply_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAdminListReply_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAdminListReply_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAdminListReply_RoleValidationError{}
